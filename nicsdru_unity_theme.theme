<?php

/**
 * @file
 * Functions to support theming in the nicsdru_unity_theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess().
 */
function nicsdru_unity_theme_preprocess(&$variables) {
  // Set a variable based on the path.matcher.
  if (!isset($variables['is_front'])) {
    try {
      $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
    }
    catch (\Exception $e) {
      $variables['is_front'] = FALSE;
    }
  }

  // Ensure the cache varies correctly.
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Implements hook_preprocess_page_attachments_alter().
 */
function nicsdru_unity_theme_page_attachments_alter(array &$page) {
  /*
   * Tell IE to use latest rendering engine (not to use compatibility mode).
   * /*$ie_edge = [
   *  '#type' => 'html_tag',
   *  '#tag' => 'meta',
   *  '#attributes' => [
   *    'http-equiv' => 'X-UA-Compatible',
   *    'content' => 'IE=edge',
   *  ],
   * ];
   * $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];
   */

  // Remove Drupal default favicon link in <head>, if present.
  if (isset($page['#attached']['html_head_link'][0])) {
    unset($page['#attached']['html_head_link'][0]);
  }

  // Attach our drupal components library for authenticated users.
  $userCurrent = \Drupal::currentUser();

  if ($userCurrent->isAuthenticated()) {
    $page['#attached']['library'][] = 'nicsdru_unity_theme/nicsdru-authenticated-styles';
  }

  // Disable Google Analytics tracking if option is set in the theme, an
  // analytics ID is present and optionally if the EU Cookie Compliance module
  // is installed and options set in the theme.
  if (theme_get_setting('ga_tracking_disabled')) {
    // Fetch the account id from the Google Analytics module config.
    $ga_account = \Drupal::config('google_analytics.settings')->get('account');

    // If Google Analytics tracking option is set in theme and EU Cookie
    // Compliance cookie is set to anything other than 2 (agree) then disable
    // analytics.
    // See https://developers.google.com/analytics/devguides/collection/analyticsjs/user-opt-out.
    if ($ga_account) {
      if (theme_get_setting('ga_tracking_disabled_eu')) {
        $script = "if(document.cookie.valueOf('cookie-agreed') != 'cookie-agreed=2') {
          window['ga-disable-" . $ga_account . "'] = true; console.log('block')}";
      }
      else {
        // By default block Google Analytics.
        $script = "window['ga-disable-" . $ga_account . "'] = true;";
      }

      // The 'ga-disable' call must come before the Google Analytics is
      // initialised, using array_unshift to add the script to the first part
      // of the HTML head.
      array_unshift($page['#attached']['html_head'], [
        [
          '#tag' => 'script',
          '#attributes' => ['type' => 'text/javascript'],
          '#value' => $script,
        ],
        'ga_tracking_options',
      ]);
    }
  }

  return $page;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nicsdru_unity_theme_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  $form['#attached']['library'][] = 'nicsdru_unity_theme/nicsdru-authenticated-styles';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nicsdru_unity_theme_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  $form['#attached']['library'][] = 'nicsdru_unity_theme/nicsdru-authenticated-styles';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nicsdru_unity_theme_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove view mode selector from preview.
  unset($form['view_mode']);
}

/**
 * Implements hook_preprocess_html().
 */
function nicsdru_unity_theme_preprocess_html(&$variables) {
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::request()->getPathInfo();
  $path_args = explode('/', $path);
  if (count($path_args) >= 3) {
    $variables['path_info']['args'] = Html::cleanCssIdentifier(ltrim($path, '/'));
  }

  // Add information about the number of sidebars.
  if ((!empty($variables['page']['sidebar_first']) || !empty($variables['page']['search_facets']))
    && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first']) || !empty($variables['page']['search_facets'])) {
    $variables['attributes']['class'][] = 'one-sidebar';
    $variables['attributes']['class'][] = 'sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'one-sidebar';
    $variables['attributes']['class'][] = 'sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'no-sidebars';
  }
}

/**
 * Implements hook_preprocess_form().
 */
function nicsdru_unity_theme_preprocess_form(array &$variables) {
  switch ($variables['element']['#id']) {
    case "block-exposedformnewsnews-search-api":
    case "block-exposedformpublication-search-api":
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('search-form');
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('search-form--page');
      break;
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function nicsdru_unity_theme_preprocess_views_view(&$variables) {
  $variables['attributes']['role'] = 'presentation';

  if ($variables['id'] === 'search') {
    $variables['exposed']['#attributes']['class'][] = Html::cleanCssIdentifier('search-form');
    $variables['exposed']['#attributes']['class'][] = Html::cleanCssIdentifier('search-form--site');
    // Make the site search required.
    $variables['exposed']['query']['#required'] = TRUE;
    // See nicsdru_unity_theme_form_alter for a required pattern on the input. The data-msg-pattern overrides the default error message.
    $variables['exposed']['query']['#attributes']['data-msg-pattern'] = t('Query must begin with a letter or number.');
    // If a label for the search input is not defined in the view, set
    // default label text.
    $search_label =& $variables['exposed']['#info']['filter-search_api_fulltext']['label'];
    if (isset($search_label) && empty($search_label)) {
      $search_label = t("Search this site");
    }
    // The label should be visually hidden.
    $variables['exposed']['query']['#title_display'] = 'invisible';
  }
}

/**
 * Implements hook_preprocess_facets_item_list().
 */
function nicsdru_unity_theme_preprocess_facets_item_list(array &$variables) {
  if (!empty($variables["facet"])) {
    if (!empty($variables["facet"]->getWidget()) && $variables["facet"]->getWidget()["type"] == 'links') {
      foreach ($variables["items"] as $key => $item) {
        if (array_key_exists('class', $item["value"]["#attributes"])) {
          $variables["items"][$key]["value"]["#attributes"]["class"][] = 'facet-item--link';
        }
        else {
          $variables["items"][$key]["value"]["#attributes"]["class"] = ['facet-item--link'];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_media().
 */
function nicsdru_unity_theme_preprocess_media(&$variables) {
  if (empty($variables['media']) || $variables['media']->bundle() != 'document') {
    return;
  }

  if (!empty($variables['content']['field_media_file'])) {
    // Map file mimetypes to user friendly document types.
    $pretty_mimes = \Drupal::service('origins_media.pretty_mime_types')->getMimeTypes();

    $file = &$variables['content']['field_media_file'][0]['#file'];

    if (!empty($file)) {
      $variables['file_size'] = format_size($file->getSize(), \Drupal::languageManager()->getCurrentLanguage()->getId());
      $variables['file_url'] = $file->createFileUrl();
      $variables['file_extension'] = pathinfo($file->createFileUrl(), PATHINFO_EXTENSION);
      $file_mimetype = $file->getMimeType();
      if (array_key_exists($file->getMimeType(), $pretty_mimes)) {
        $variables['file_type'] = $pretty_mimes[$file_mimetype];
      }
      else {
        $variables['file_type'] = strtoupper(preg_replace('/^application\/(\w+)$/', '\1', $file_mimetype));
      }
    }
    $variables['media_langcode'] = $variables['media']->language()->getId();
  }
}

/**
 * Implements hook_preprocess_slick().
 */
function nicsdru_unity_theme_preprocess_slick(&$variables) {
  if (isset($variables['arrow_attributes']['role'])) {
    unset($variables['arrow_attributes']['role']);
  }
}

/**
 * Implements hook_preprocess_container().
 *
 * Adds a suffix to elements with id #edit-actions to stop duplication of ids
 * on the same page.
 */
function nicsdru_unity_theme_preprocess_container(&$variables) {
  if (isset($variables['element']['#id'])) {
    $id = $variables['element']['#id'];
    if (in_array($id, ['edit-actions'])) {
      $id = Html::getUniqueId($id);
    }
    $variables['element']['#id'] = $id;
    $variables['attributes']['id'] = $id;
  }
}

/**
 * Implements hook_form_alter().
 */
function nicsdru_unity_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-search-site-search' || 'views-exposed-form-search-search-page') {
    // Ensure the input field only accepts a letter or a number at the beginning of a search.
    $form['query']['#pattern'] = '^[a-zA-Z0-9]+.*';
  }
}
